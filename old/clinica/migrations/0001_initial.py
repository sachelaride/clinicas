# Generated by Django 4.2.7 on 2025-08-01 11:17

import clinica.utils
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('perfil', models.CharField(blank=True, choices=[('ATENDENTE', 'Atendente'), ('PROFISSIONAL', 'Profissional da Saúde'), ('COORDENADOR', 'Coordenador')], max_length=20)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agendamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateTimeField()),
                ('status', models.CharField(choices=[('AGENDADO', 'Agendado'), ('CONCLUIDO', 'Concluído'), ('CANCELADO', 'Cancelado')], default='AGENDADO', max_length=20)),
                ('guiche_numero', models.PositiveIntegerField(blank=True, help_text='Número do guichê atribuído para este agendamento.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Atendimento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observacoes', models.TextField(blank=True)),
                ('data_inicio', models.DateTimeField(auto_now_add=True)),
                ('data_fim', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('INICIADO', 'Iniciado'), ('FINALIZADO', 'Finalizado')], default='INICIADO', max_length=20)),
                ('agendamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.agendamento')),
            ],
        ),
        migrations.CreateModel(
            name='CampanhaMarketing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('tipo', models.CharField(choices=[('SMS', 'SMS'), ('WHATSAPP', 'WhatsApp'), ('EMAIL', 'E-mail Marketing'), ('OUTRO', 'Outro')], max_length=10)),
                ('data_inicio', models.DateField()),
                ('data_fim', models.DateField(blank=True, null=True)),
                ('descricao', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Clinica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('endereco', models.TextField()),
                ('telefone', models.CharField(blank=True, max_length=25)),
                ('num_guiches', models.PositiveIntegerField(default=1, help_text='Número de guichês de atendimento disponíveis nesta clínica.')),
                ('tempo_minimo_atendimento', models.PositiveIntegerField(default=30, help_text='Tempo mínimo de atendimento em minutos.')),
            ],
        ),
        migrations.CreateModel(
            name='Convenio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('telefone', models.CharField(blank=True, max_length=25, null=True)),
                ('origem', models.CharField(blank=True, help_text='Ex: Google, Redes Sociais, Indicação', max_length=100)),
                ('status', models.CharField(choices=[('NOVO', 'Novo'), ('CONTATO', 'Em Contato'), ('QUALIFICADO', 'Qualificado'), ('CONVERTIDO', 'Convertido'), ('PERDIDO', 'Perdido')], default='NOVO', max_length=20)),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('cpf', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator('^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$', 'CPF deve estar no formato XXX.XXX.XXX-XX')])),
                ('rg', models.CharField(blank=True, max_length=20)),
                ('data_nascimento', models.DateField()),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('telefone', models.CharField(blank=True, max_length=25)),
                ('endereco', models.TextField(blank=True)),
                ('responsavel_legal', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Plano',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('convenio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planos', to='clinica.convenio')),
            ],
            options={
                'unique_together': {('convenio', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='TipoTratamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.TextField(blank=True)),
                ('tempo_medio_atendimento', models.PositiveIntegerField(default=30, help_text='Tempo médio de atendimento em minutos.')),
                ('clinica', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tipos_tratamento', to='clinica.clinica')),
            ],
            options={
                'verbose_name': 'Tipo de Tratamento',
                'verbose_name_plural': 'Tipos de Tratamento',
                'unique_together': {('clinica', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='Prontuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('editavel', models.BooleanField(default=True)),
                ('is_finalized', models.BooleanField(default=False, help_text='Indica se o prontuário foi finalizado.')),
                ('queixa_principal', models.TextField(blank=True)),
                ('historia_doenca_atual', models.TextField(blank=True)),
                ('antecedentes_pessoais_familiares', models.TextField(blank=True)),
                ('habitos_vida', models.TextField(blank=True, help_text='Tabagismo, etilismo, sono, atividade física, alimentação')),
                ('uso_medicamentos', models.TextField(blank=True)),
                ('alergias_conhecidas', models.TextField(blank=True)),
                ('sinais_vitais', models.TextField(blank=True, help_text='Pressão arterial, temperatura, frequência cardíaca, etc.')),
                ('exame_fisico_geral_segmentar', models.TextField(blank=True)),
                ('avaliacoes_especificas', models.TextField(blank=True, help_text='Exames odontológicos, psicológicos, ortopédicos')),
                ('hipoteses_diagnosticas', models.TextField(blank=True, help_text='CID-10, se possível')),
                ('exames_complementares', models.TextField(blank=True, help_text='Solicitados ou realizados')),
                ('conclusao_diagnostica', models.TextField(blank=True)),
                ('prescricoes', models.TextField(blank=True, help_text='Receituário')),
                ('encaminhamentos', models.TextField(blank=True)),
                ('procedimentos_realizados', models.TextField(blank=True)),
                ('orientacoes_paciente', models.TextField(blank=True)),
                ('plano_tratamento_acompanhamento', models.TextField(blank=True)),
                ('evolucao_clinica', models.TextField(blank=True, help_text='Registro das consultas subsequentes, alterações no quadro, etc.')),
                ('termo_consentimento', models.FileField(blank=True, null=True, upload_to=clinica.utils.prontuario_upload_path)),
                ('fichas_avaliacao_especifica', models.FileField(blank=True, null=True, upload_to=clinica.utils.prontuario_upload_path)),
                ('exames_laboratoriais_imagem', models.FileField(blank=True, null=True, upload_to=clinica.utils.prontuario_upload_path)),
                ('relatorios_outros_profissionais', models.FileField(blank=True, null=True, upload_to=clinica.utils.prontuario_upload_path)),
                ('assinatura_profissional', models.CharField(blank=True, max_length=100)),
                ('registro_profissional', models.CharField(blank=True, max_length=50)),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prontuarios', to='clinica.paciente')),
                ('tipo_tratamento_definido', models.ForeignKey(blank=True, help_text='O tipo de tratamento geral definido para este prontuário.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinica.tipotratamento')),
            ],
            options={
                'verbose_name': 'Prontuário',
                'verbose_name_plural': 'Prontuários',
            },
        ),
        migrations.CreateModel(
            name='Profissional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('especialidade', models.CharField(max_length=100)),
                ('conselho_profissional', models.CharField(help_text='Ex: CRM, COREN, etc.', max_length=20)),
                ('numero_conselho', models.CharField(max_length=20)),
                ('carga_horaria_semanal', models.PositiveIntegerField(default=40)),
                ('comissao_percentual', models.DecimalField(decimal_places=2, default=0.0, help_text='Percentual de comissão por atendimento.', max_digits=5)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profissional_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PesquisaSatisfacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_pesquisa', models.DateField(auto_now_add=True)),
                ('nota_nps', models.IntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], help_text='Nota de 0 a 10 para o NPS.')),
                ('comentarios', models.TextField(blank=True)),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.paciente')),
            ],
        ),
        migrations.CreateModel(
            name='PastaDocumento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('clinica', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.clinica')),
            ],
        ),
        migrations.AddField(
            model_name='paciente',
            name='plano',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinica.plano'),
        ),
        migrations.CreateModel(
            name='LancamentoFinanceiro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('RECEITA', 'Receita'), ('DESPESA', 'Despesa')], max_length=7)),
                ('descricao', models.CharField(max_length=255)),
                ('valor', models.DecimalField(decimal_places=2, max_digits=10)),
                ('data_vencimento', models.DateField()),
                ('data_pagamento', models.DateField(blank=True, null=True)),
                ('atendimento', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinica.atendimento')),
            ],
        ),
        migrations.CreateModel(
            name='Fatura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mes_referencia', models.DateField()),
                ('valor_total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('ABERTA', 'Aberta'), ('FECHADA', 'Fechada'), ('PAGA', 'Paga'), ('GLOSADA', 'Glosada')], default='ABERTA', max_length=20)),
                ('atendimentos', models.ManyToManyField(to='clinica.atendimento')),
                ('convenio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.convenio')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentoArquivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arquivo', models.FileField(upload_to=clinica.utils.documento_upload_path)),
                ('hash_arquivo', models.CharField(max_length=64)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('paciente', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='clinica.paciente')),
                ('pasta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.pastadocumento')),
            ],
        ),
        migrations.CreateModel(
            name='CupomDesconto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=50, unique=True)),
                ('valor_desconto', models.DecimalField(decimal_places=2, max_digits=10)),
                ('data_validade', models.DateField()),
                ('ativo', models.BooleanField(default=True)),
                ('campanha', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinica.campanhamarketing')),
            ],
        ),
        migrations.CreateModel(
            name='Comissao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=10)),
                ('paga', models.BooleanField(default=False)),
                ('atendimento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.atendimento')),
                ('profissional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.profissional')),
            ],
        ),
        migrations.AddField(
            model_name='atendimento',
            name='prontuario',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='atendimentos_relacionados', to='clinica.prontuario'),
        ),
        migrations.AddField(
            model_name='atendimento',
            name='tipo_tratamento_realizado',
            field=models.ForeignKey(blank=True, help_text='O tipo de tratamento realizado neste atendimento.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinica.tipotratamento'),
        ),
        migrations.AddField(
            model_name='agendamento',
            name='paciente',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.paciente'),
        ),
        migrations.AddField(
            model_name='agendamento',
            name='profissional',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinica.profissional'),
        ),
        migrations.AddField(
            model_name='user',
            name='clinica',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinica.clinica'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='clinica_user_groups', to='auth.group'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='clinica_user_permissions', to='auth.permission'),
        ),
        migrations.CreateModel(
            name='TabelaPrecos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preco', models.DecimalField(decimal_places=2, max_digits=10)),
                ('plano', models.ForeignKey(blank=True, help_text='Deixe em branco para preço particular.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinica.plano')),
                ('tratamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='precos', to='clinica.tipotratamento')),
            ],
            options={
                'verbose_name': 'Tabela de Preço',
                'verbose_name_plural': 'Tabelas de Preços',
                'unique_together': {('tratamento', 'plano')},
            },
        ),
    ]
